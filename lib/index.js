// Generated by CoffeeScript 2.5.1
var handlebars, is_object_literal,
  indexOf = [].indexOf;

handlebars = require('handlebars');

({is_object_literal} = require('mixme'));

module.exports = function(context, options = {}) {
  var _render, _set, compile, key, partial, proxify, proxy, value, visiting;
  // Default templated engine
  if (options.render == null) {
    options.render = function(source, proxy) {
      var template;
      template = handlebars.compile(source);
      return template(proxy, options.handlebars);
    };
  }
  if (options.partial == null) {
    options.partial = void 0;
  }
  // options.array ?= false
  // Tracking graph traversal
  visiting = [];
  // Work on properties
  _set = function(keys, value) {
    var i, j, key, len, results, search;
    search = context;
    results = [];
    for (i = j = 0, len = keys.length; j < len; i = ++j) {
      key = keys[i];
      if (i < keys.length - 1) {
        results.push(search = search[key]);
      } else {
        results.push(search[key] = value);
      }
    }
    return results;
  };
  // Render a template, the resulting `value` is placed in `keys`
  _render = function(keys, value) {
    var keys_as_string;
    keys_as_string = JSON.stringify(keys);
    // Update context with new value if not already visited
    if (indexOf.call(visiting, keys_as_string) >= 0) {
      throw Error(`Circular Reference: graph is ${[...visiting, [visiting[0]]].join(' -> ')}`);
    }
    visiting.push(keys_as_string);
    value = options.render(value, proxy);
    visiting.pop();
    _set(keys, value);
    return value;
  };
  // Clone the context by recursively converting it into proxies
  proxify = function(source, keys, partial) {
    return new Proxy(source, {
      get: function(target, key) {
        var value;
        // Retrieve the value from context
        value = target[key];
        if ((partial != null) && !partial[key]) {
          // Return value without rendering if key is filtered by partial
          return value;
        }
        if ((options.array && Array.isArray(value)) || is_object_literal(value)) {
          return proxify(value, [...keys, key], ((partial != null) && is_object_literal(partial[key]) ? partial[key] : void 0));
        } else if (typeof value === 'string') {
          return _render([...keys, key], value);
        } else {
          return value;
        }
      },
      // Returned object if modified after being proxyfied
      set: function(target, key, value) {
        target[key] = value;
        return true;
      }
    });
  };
  if (options.mutate) {
    for (key in context) {
      value = context[key];
      if ((options.partial != null) && !options.partial[key]) {
        continue;
      }
      if ((options.array && Array.isArray(value)) || is_object_literal(value)) {
        partial = options.partial;
        partial = (partial != null) && is_object_literal(partial[key]) ? partial[key] : void 0;
        context[key] = proxify(value, [key], partial);
      }
    }
    // else
    //   context[key] = value
    proxy = context;
  } else {
    proxy = proxify(context, [], options.partial);
  }
  // Trigger templating on every properties
  compile = function(search, keys, partial) {
    var childPartial, results;
    results = [];
    for (key in search) {
      value = search[key];
      if ((partial != null) && !partial[key]) {
        continue;
      }
      // String interpreted as a template
      if (typeof value === 'string') {
        results.push(_render([...keys, key], value));
      } else if ((options.array && Array.isArray(value)) || is_object_literal(value)) {
        // Note, array goes here as well and call `compile` with the full array
        // compile then loop through the array with `for` resulting
        // in the key as the index converted to a string
        childPartial = (partial != null) && is_object_literal(partial[key]) ? partial[key] : void 0;
        results.push(compile(search[key], [...keys, key], childPartial));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  if (options.compile) {
    compile(context, [], options.partial);
    return context;
  }
  // Return the result
  return proxy;
};
