// Generated by CoffeeScript 2.4.0
var handlebars, is_object_literal,
  indexOf = [].indexOf;

handlebars = require('handlebars');

({is_object_literal} = require('mixme'));

module.exports = function(context, options = {}) {
  var _get, _set, init, proxify, proxy, visiting, visits;
  // Default templated engine
  if (options.render == null) {
    options.render = function(source, proxy) {
      var template;
      template = handlebars.compile(source);
      return template(proxy, options.handlebars);
    };
  }
  // Tracking graph traversal
  visits = [];
  visiting = [];
  // Work on properties
  _get = function(keys) {
    var i, j, key, keys_as_string, len, value;
    value = context;
    for (i = j = 0, len = keys.length; j < len; i = ++j) {
      key = keys[i];
      value = value[key];
    }
    if (is_object_literal(value)) {
      return null;
    }
    if (typeof value !== 'string') {
      return value;
    }
    keys_as_string = JSON.stringify(keys);
    // Update context with new value if not already visited
    if (indexOf.call(visits, keys_as_string) < 0) {
      if (indexOf.call(visiting, keys_as_string) >= 0) {
        throw Error(`Circular Reference: graph is ${[...visiting, [visiting[0]]].join(' -> ')}`);
      }
      visiting.push(keys_as_string);
      value = options.render(value, proxy);
      visiting.pop();
      _set(keys, value);
      visits.push(keys_as_string);
    }
    return value;
  };
  _set = function(keys, value) {
    var i, j, key, len, results, search;
    search = context;
    results = [];
    for (i = j = 0, len = keys.length; j < len; i = ++j) {
      key = keys[i];
      if (i < keys.length - 1) {
        results.push(search = search[key]);
      } else {
        results.push(search[key] = value);
      }
    }
    return results;
  };
  // Clone the context by recursively converting it into proxies
  proxify = function(obj, keys) {
    var k, proxies, v;
    proxies = [];
    for (k in obj) {
      v = obj[k];
      if (!is_object_literal(v)) {
        continue;
      }
      proxies[k] = proxify(v, [...keys, k]);
    }
    return new Proxy(obj, {
      get: function(target, name, receiver) {
        var value;
        value = _get([...keys, name]);
        if (value != null) {
          return value;
        } else {
          return proxies[name];
        }
      }
    });
  };
  proxy = proxify(context, []);
  // Trigger templating on every properties
  init = function(search, keys) {
    var key, results, value;
    results = [];
    for (key in search) {
      value = search[key];
      // Value is a string, thus a template
      if (typeof value === 'string') {
        results.push(_get([...keys, key]));
      } else {
        results.push(init(search[key], [...keys, key]));
      }
    }
    return results;
  };
  init(context, []);
  // Return the result
  return context;
};
